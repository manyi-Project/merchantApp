//background,IE下也支持background-size属性
@mixin background($url,$cover:cover){
	background: url($url);
	background-position: inherit;
	background-repeat: no-repeat;
	-webkit-background-size: $cover;
	background-size: $cover;
	filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=$url,sizingMethod='scale');
	-ms-filter:"progid:DXImageTransform.Microsoft.AlphaImageLoader(src=#{$url},sizingMethod='scale')";
}

//正方形
@mixin square($def:100%){
	width: $def;
	height: $def;
}
@mixin lineHight($def:100%){
	line-height: $def;
}
@mixin bdr-radius($radius:10px){
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}
$baceFontCol:#999;
@mixin baceBorderB($baceBorderCol:#e3e3e3){
	border-bottom: 1px solid $baceBorderCol;
}
//块元素左右居中
@mixin LRcenter($width){
	width: $width + px;
	margin: 0 auto;
}
//不同dpr对应不同字体
@mixin font-dpr($font-size){
	font-size: $font-size;/*no*/
	[data-dpr="2"] & {
		font-size: $font-size * 2;/*no*/
	}
	[data-dpr="3"] & {
		font-size: $font-size * 3;/*no*/
	}
}
//height等于line-height，用于文字居中
@mixin lineHeightEQHeight($height){
	height: $height;
	line-height: $height;
}

/*
 *兼容ie8的透明度写法
*/
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

/*
 *绝对定位
*/
@mixin pos-abs($top: null, $right: null, $bottom: null, $left: null) {
	position: absolute;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}
//定义不同dpr下的不同边框
//border
@mixin border-dpr($border-size:1px,$border-style:solid,$border-color:#e3e3e3){
	border: $border-size $border-style $border-color;/*no*/
	[data-dpr="2"] & {
		border: $border-size * 2 $border-style $border-color;/*no*/
	}
	[data-dpr="3"] & {
		border: $border-size * 3 $border-style $border-color;/*no*/
	}
}
//border-right
@mixin borderR-dpr($border-size:1px,$border-style:solid,$border-color:#e3e3e3){
	border-right: $border-size $border-style $border-color;/*no*/
	[data-dpr="2"] & {
		border-right: $border-size * 2 $border-style $border-color;/*no*/
	}
	[data-dpr="3"] & {
		border-right: $border-size * 3 $border-style $border-color;/*no*/
	}
}
//border-left
@mixin borderL-dpr($border-size:1px,$border-style:solid,$border-color:#e3e3e3){
	border-left: $border-size $border-style $border-color;/*no*/
	[data-dpr="2"] & {
		border-left: $border-size * 2 $border-style $border-color;/*no*/
	}
	[data-dpr="3"] & {
		border-left: $border-size * 3 $border-style $border-color;/*no*/
	}
}
//border-top
@mixin borderT-dpr($border-size:1px,$border-style:solid,$border-color:#e3e3e3){
	border-top: $border-size $border-style $border-color;/*no*/
	[data-dpr="2"] & {
		border-top: $border-size * 2 $border-style $border-color;/*no*/
	}
	[data-dpr="3"] & {
		border-top: $border-size * 3 $border-style $border-color;/*no*/
	}
}
//border-bottom
@mixin borderB-dpr($border-size:1px,$border-style:solid,$border-color:#e3e3e3){
	border-bottom: $border-size $border-style $border-color;/*no*/
	[data-dpr="2"] & {
		border-bottom: $border-size * 2 $border-style $border-color;/*no*/
	}
	[data-dpr="3"] & {
		border-bottom: $border-size * 3 $border-style $border-color;/*no*/
	}
}


/**
 *  ##上下垂直居中center使用说明##
 * 一、1：为子元素设定定位上下文，父级设定position:relative;
 *     2：让子元素绝对居中于父容器
 * 二、没有向 Sass mixin 传递参数，使用 CSS transform 属性实现居中效果
 * 三、向 Sass mixin 传递了宽度，所以就使用负向 margin 处理水平位置，使用 CSS transform 处理垂直位置
 * 四、向 Sass mixin 传递了高度，所以就使用负向 margin 处理垂直位置，使用 CSS transform 处理水平位置
 *五、 向 Sass mixin 传递了高度和宽度，所以就使用负向 margin 处理水平和垂直位置
 */
@mixin center($width: null, $height: null) {
	position: absolute;
	top: 50%;
	left: 50%;
	@if not $width and not $height {
		-webkit-transform: translate(-50%, -50%);
		-moz-transform: translate(-50%, -50%);
		-ms-transform: translate(-50%, -50%);
		-o-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
	} @else if $width and $height {
		width: $width;/*no*/
		height: $height;/*no*/
		margin: -($width / 2) #{0 0} -($height / 2);/*no*/
	} @else if not $height {
		width: $width;/*no*/
		margin-left: -($width / 2);/*no*/
		-webkit-transform: translateY(-50%);
		-moz-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
		-o-transform: translateY(-50%);
		transform: translateY(-50%);
	} @else {
		height: $height;/*no*/
		margin-top: -($height / 2);/*no*/
		-webkit-transform: translateX(-50%);
		-moz-transform: translateX(-50%);
		-ms-transform: translateX(-50%);
		-o-transform: translateX(-50%);
		transform: translateX(-50%);
	}
}

/**
 *  ##空心的三角箭头##
 *  一、1：为子元素设定定位上下文，父级设定position:relative;
 *  二、假定子元素class="caret",用法 .caret{ left:xx; top:xx; @include caret(10px,2px,right,orange,orange);}
 *  三、参数说明：1.$caret-width三角箭头的外层宽
                  2.$border-width三角箭头的线宽
                  3.$direction三角箭头的方向
                  4.$border-color三角箭头的线条颜色
                  5.$background-color三角箭头的中心颜色，如果和$border-color颜色一直则为实心三角型
**/
@mixin caret($caret-width,$border-width,$direction,$border-color,$background-color){
	position: absolute;
	&:before,
	&:after {
		content:"";
		position: absolute;
	}
	@if $direction == top {
		&:before {
			top:0;
			left: 0;
			border-bottom: $caret-width solid $border-color;/*no*/
			border-left: $caret-width solid transparent;/*no*/
			border-right: $caret-width solid transparent;/*no*/
		}
		&:after {
			left: $border-width;/*no*/
			top: $border-width;/*no*/
			border-bottom: ($caret-width - $border-width) solid $background-color;/*no*/
			border-left: ($caret-width - $border-width) solid transparent;/*no*/
			border-right: ($caret-width - $border-width) solid transparent;/*no*/
		}
	}
	@else if $direction == right {
		&:before {
			top:0;
			left: 0;
			border-left: $caret-width solid $border-color;/*no*/
			border-top: $caret-width solid transparent;/*no*/
			border-bottom: $caret-width solid transparent;/*no*/
		}
		&:after {
			left: 0;
			top: $border-width;/*no*/
			border-left: ($caret-width - $border-width) solid $background-color;/*no*/
			border-top: ($caret-width - $border-width) solid transparent;/*no*/
			border-bottom: ($caret-width - $border-width) solid transparent;/*no*/
		}
	}
	@else if $direction == bottom {
		&:before {
			top:0;
			left: 0;
			border-top: $caret-width solid $border-color;/*no*/
			border-left: $caret-width solid transparent;/*no*/
			border-right: $caret-width solid transparent;/*no*/
		}
		&:after {
			left: $border-width;/*no*/
			top: 0;
			border-top: ($caret-width - $border-width) solid $background-color;/*no*/
			border-left: ($caret-width - $border-width) solid transparent;/*no*/
			border-right: ($caret-width - $border-width) solid transparent;/*no*/
		}
	}
	@else if $direction == left {
		&:before {
			top:0;
			left: 0;
			border-right: $caret-width solid $border-color;/*no*/
			border-top: $caret-width solid transparent;/*no*/
			border-bottom: $caret-width solid transparent;/*no*/
		}
		&:after {
			left: $border-width;/*no*/
			top: $border-width;/*no*/
			border-right: ($caret-width - $border-width) solid $background-color;/*no*/
			border-top: ($caret-width - $border-width) solid transparent;/*no*/
			border-bottom: ($caret-width - $border-width) solid transparent;/*no*/
		}
	}
}